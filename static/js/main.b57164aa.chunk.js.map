{"version":3,"sources":["components/Content/Content.js","components/Time/Time.js","components/Button/Button.js","components/Split/Split.js","components/Split/SplitContainer.js","App.js","serviceWorker.js","index.js"],"names":["Content","props","className","children","Time","mm","ss","cs","Button","onClick","click","text","Split","useState","heart","setHeart","split","SplitContainer","App","state","running","reset","time","splitAll","startStopHandle","bind","resetSplitHandle","clearInterval","this","timerID","setState","timerStart","Date","now","setInterval","Math","floor","resetTime","splitTime","length","newTemp","splice","tempTime","min4","splits","map","key","toString","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b57164aa.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Content = props => {\r\n  return <div className=\"content-container\">{props.children}</div>;\r\n};\r\n\r\nexport default Content;\r\n","import React from \"react\";\r\n\r\nconst Time = props => {\r\n  return (\r\n    <>\r\n      <h1>\r\n        {props.mm}:{props.ss}:{props.cs}\r\n      </h1>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Time;\r\n","import React from \"react\";\r\n\r\nconst Button = props => {\r\n  return (\r\n    <>\r\n      <button onClick={props.click}>\r\n        <h4>{props.text}</h4>\r\n      </button>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Button;\r\n","import React, { useState } from \"react\";\r\n\r\nconst Split = props => {\r\n  let [heart, setHeart] = useState(null);\r\n\r\n  return (\r\n    <div className=\"split-container\">\r\n      <h2\r\n        onClick={() => {\r\n          setHeart(heart ? (heart = null) : (heart = \"<3\"));\r\n        }}\r\n      >\r\n        {props.split}\r\n      </h2>\r\n      <p>{heart}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Split;\r\n","import React from \"react\";\r\n\r\nconst SplitContainer = props => {\r\n  return <div className=\"split-container-container\">{props.children}</div>;\r\n};\r\n\r\nexport default SplitContainer;\r\n","import React, { Component } from \"react\";\nimport \"./App.scss\";\nimport Content from \"./components/Content/Content\";\nimport Time from \"./components/Time/Time\";\nimport Button from \"./components/Button/Button\";\nimport Split from \"./components/Split/Split\";\nimport SplitContainer from \"./components/Split/SplitContainer\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      text: true,\n      running: false,\n      reset: true,\n      time: 0,\n      cs: 0,\n      ss: 0,\n      mm: 0,\n      splitAll: [\"-:-:-\", \"-:-:-\", \"-:-:-\"]\n    };\n\n    this.startStopHandle = this.startStopHandle.bind(this);\n    this.resetSplitHandle = this.resetSplitHandle.bind(this);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timerID);\n  }\n\n  startStopHandle() {\n    if (this.state.running) {\n      clearInterval(this.timerID);\n      this.timerID = false;\n      this.setState({\n        running: false,\n        reset: true\n      });\n    } else {\n      this.setState({\n        timerStart: Date.now() - this.state.time\n      });\n      this.timerID = setInterval(\n        () => {\n          this.setState({\n            time: Date.now() - this.state.timerStart,\n            cs: Math.floor(this.state.time / 10) % 100,\n            ss: Math.floor(this.state.time / 1000) % 60,\n            mm: Math.floor(this.state.time / 60000) % 60\n          });\n        },\n\n        10\n      );\n      this.setState({\n        running: true,\n        reset: false\n      });\n    }\n    this.setState(state => ({\n      text: !state.text\n    }));\n  }\n\n  resetSplitHandle() {\n    !this.state.reset ? this.splitTime() : this.resetTime();\n  }\n\n  splitTime() {\n    if (this.state.splitAll.length >= 3) {\n      let newTemp = this.state.splitAll.splice(2, 3);\n      this.setState({\n        splitAll: [newTemp, ...this.state.splitAll]\n      });\n    }\n    const tempTime = `${\n      this.state.mm <= 9 ? \"0\" + this.state.mm : this.state.min4\n    }:${this.state.ss <= 9 ? \"0\" + this.state.ss : this.state.ss}:${\n      this.state.cs <= 9 ? \"0\" + this.state.cs : this.state.cs\n    }`;\n    this.setState({ splitAll: [tempTime, ...this.state.splitAll] });\n  }\n\n  resetTime() {\n    this.setState({\n      text: \"Start\",\n      running: false,\n      time: 0,\n      cs: 0,\n      ss: 0,\n      mm: 0,\n      splitAll: [\"-:-:-\", \"-:-:-\", \"-:-:-\"]\n    });\n  }\n\n  render() {\n    let splits = (\n      <>\n        {this.state.splitAll.map(split => {\n          return (\n            <>\n              <Split key={split.toString()} split={split}></Split>\n            </>\n          );\n        })}\n      </>\n    );\n    return (\n      <div className=\"App\">\n        <Content>\n          <Time\n            cs={\n              this.state.cs >= 100\n                ? \"99\"\n                : this.state.cs <= 9\n                ? \"0\" + this.state.cs\n                : this.state.cs\n            }\n            ss={this.state.ss <= 9 ? \"0\" + this.state.ss : this.state.ss}\n            mm={this.state.mm <= 9 ? \"0\" + this.state.mm : this.state.mm}\n          ></Time>\n          <Button\n            click={this.startStopHandle}\n            text={this.state.text ? \"Start\" : \"Stop\"}\n          ></Button>\n          <Button\n            click={this.resetSplitHandle}\n            text={this.state.reset ? \"RESET\" : \"SPLIT\"}\n          ></Button>\n          <SplitContainer>{splits}</SplitContainer>\n        </Content>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}